enum Platform {
  KyberNetwork
  Uniswap
}
type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # token specific volume
  volume: BigDecimal!
  volumeETH: BigDecimal!
  volumeUSD: BigDecimal!

  # transactions across all pairs
  txCount: BigInt!
}

type ExampleEntity @entity {
  id: ID!
  count: BigInt!
  trader: Bytes! # address
  src: Bytes! # address
}

type User @entity {
  id: ID!
  txCount: BigInt!
  swaps: [Swap!] @derivedFrom(field: "user")
}

type Swap @entity {
  # transaction hash
  id: ID!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  user: User!

  # populated from the Swap event
  trader: Bytes!
  src: Token!
  dst: Token!
  srcAmount: BigDecimal!
  dstAmount: BigDecimal!
  recipient: Bytes!
  gasUsed: BigDecimal!
  gasPrice: BigDecimal!

  amountUSD: BigDecimal!
  amountETH: BigDecimal!

  platform: Platform!

  platformFeeBps: BigInt!
  platformFeeWallet: Bytes!

  feeToken: Token!
  feeAmount: BigDecimal!
  feeAmountInETH: BigDecimal!
}

# type TokenDayData @entity {
#   id: ID!
#   date: Int!
#   token: Token!
# }

# type KrystalDayData @entity {
#   id: ID!
#   date: Int
# }

type Counter @entity {
  id: ID!

  # total volume
  totalVolumeUSD: BigDecimal!
  totalVolumeETH: BigDecimal!

  # total user
  totalUser: BigInt!

  # transactions
  txCount: BigInt!
}

type DayData @entity {
  id: ID!

  date: Int!

  volumeETH: BigDecimal!
  volumeUSD: BigDecimal!
  txCount: BigInt
}

type TokenDayData @entity {
  id: ID!
  date: Int!
  token: Token!

  # volume stats
  volumeToken: BigDecimal!
  volumeETH: BigDecimal!
  volumeUSD: BigDecimal!
  txCount: BigInt!
}

type FeeDistributed @entity {
  id: ID!
  token: Token!
  platformFeeWei: BigInt!
  platformWallet: Bytes!
}
